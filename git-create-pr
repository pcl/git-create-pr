#!/bin/bash

set -eou pipefail

if [ $# -ne 0 ]; then
    echo "Usage: git create-pr"
    exit -1
fi

auth=undefined

function create_pr {
    local remote="$1"
    local branch="$2"

    local origin_api_path=$(git config --get remote.origin.url | sed 's/.*:\(.*\).git/\1/')
    local origin_org=$(echo $origin_api_path | sed 's,/.*,,')
    local origin_repo=$(echo $origin_api_path | sed 's,.*/,,')

    local remote_api_path=$(git config --get remote.$remote.url | sed 's/.*:\(.*\).git/\1/')
    local remote_user=$(echo $remote_api_path | sed 's,/.*,,')
    local remote_head="$remote_user:$branch"
    local remote_host=$(git config --get hub.host)
    local api_url="https://$remote_host/api/v3/repos/$origin_api_path/pulls"

    local title=$(git log -n 1 --format=format:%s | sed 's/"/\\"/g')

    set +e
    local response=$(curl -s -H "$auth" "$api_url" -d "{ \
        \"title\": \"$title\", \
        \"head\": \"$remote_head\", \
        \"base\": \"master\" \
    }")
    local status=$?
    set -e
    if [ $status -ne 0 ]; then
        echo "PR creation failed! Output: "
        echo "$response"
        exit $status
    fi

    local pr_number=$(echo "$response" | jq -r '.number')
    if [ "$pr_number" = "null" ]; then
        echo "PR creation failed! Output: "
        echo "$response"
        exit -1
    fi

    local suggestionsJson="$(curl -s -H "$auth" https://$remote_host/api/graphql -d "{ \
        \"query\": \"query { \
            repository(owner: \\\"$origin_org\\\", name: \\\"$origin_repo\\\") { \
                pullRequest(number: $pr_number) { \
                    suggestedReviewers { reviewer { name, login } } } } }\" }")"
    local suggestions="$(echo $suggestionsJson \
        | jq -r '.data.repository.pullRequest.suggestedReviewers[].reviewer.login')"

    if [ -n "$suggestions" ]; then
        suggestion_text=" (Suggestions: $(echo $suggestions | tr '\n' ' '))"
    else
        suggestion_text=""
    fi
    
    echo -n "PR $pr_number created! Add a reviewer?$suggestion_text [Y|n] "
    if read_boolean; then
        echo -n "Enter reviewer id: "
        read reviewer
        if [ -n "$reviewer" ]; then
            set +e
            local json="{ \"reviewers\": [ \"$reviewer\" ] }"
            local rev_response="$(curl -s -H "$auth" $api_url/$pr_number/requested_reviewers -d "$json")"
            local rev_status=$?
            set -e
            if [ $rev_status -ne 0 ]; then
                echo "Failed to assign reviewer! Note that reviewers must be repo collaborators."
                echo "$rev_response"
            fi
        fi
        echo
    fi

    echo -n "Open in a browser? [Y|n] "
    if read_boolean; then
        open $(echo "$response" | jq -r '.html_url')
    fi
}

function read_boolean {
    read boolean_response
    if [ -z "$boolean_response" ] || [ "$boolean_response" == "Y" ] || [ "$boolean_response" == "y" ]; then
        return 0
    else
        return 1
    fi
}

function main {
    if ! type jq > /dev/null; then
        echo "Error: the 'jq' command  must be installed to run this script."
        echo "You can install it by typing: "
        echo
        echo "    brew install jq"
        exit -1
    fi
    
    set +e
    auth="Authorization: token $(git config --get prtools.token)"
    if [ $? -ne 0 ]; then
        echo "A GitHub token must be provided. Generate one on GitHub:"
        echo "    https://github.com/settings/tokens/new"
        echo
        echo "The token needs to have the 'repo' scope (or probably some"
        echo "subset of it)."
        echo ""
        echo "Then, add it to your git config: "
        echo "    git config --global --add prtools.token <github-token>"
        exit -1
    fi
    set -e

    local head_sha=$(git reflog -n 1 --format=format:%H)

    set +e
    local remotes="$(git remote | grep -v origin)"
    if [ $? -ne 0 ]; then
        if [ $(git remote | grep -c origin) -eq 0 ]; then
            echo "Coudn't find any remotes. Is this git repo configured yet?"
        else
            echo "Couldn't find any remotes other than origin. Perhaps you"
            echo "should create a fork? You can do this with the 'hub' CLI tool:"
            echo "    hub fork"
        fi
        exit -1
    fi
    set -e

    local created=false
    for remote in $(git remote | grep -v origin); do
        local candidate_sha=$(git ls-remote --heads $remote | grep "$head_sha" | head -n 1)
        if [ -n "$candidate_sha" ]; then
            local candidate_branch=$(echo "$candidate_sha" | awk '{print $2}' | sed 's,refs/heads/,,')
            create_pr "$remote" "$candidate_branch"
            created=true
            break
        fi
    done

    if ! $created; then
        echo "No local changes found to create PRs for!"
        exit -1
    fi
}

main
